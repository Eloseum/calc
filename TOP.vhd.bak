library IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

entity Processor is
    Port 
	 ( 
		ADDRESS	: BUFFER STD_LOGIC_VECTOR(15 downto 0);
		DATA		: INOUT STD_LOGIC_VECTOR(7 downto 0);
		CLOCK		: IN STD_LOGIC; 	-- ACTIVE LOW
		INT		: IN STD_LOGIC; 	-- ACTIVE LOW
		NMI		: IN STD_LOGIC; 	-- ACTIVE LOW
		HALT		: OUT STD_LOGIC; 	-- ACTIVE LOW
		MREQ		: OUT STD_LOGIC; 	-- ACTIVE LOW
		IORQ		: OUT STD_LOGIC; 	-- ACTIVE LOW 
		RD			: BUFFER STD_LOGIC;	-- ACTIVE LOW
		WR			: BUFFER STD_LOGIC; 	-- ACTIVE LOW
		BUSAK		: OUT STD_LOGIC; 	-- ACTIVE LOW
		WAET		: IN STD_LOGIC; 	-- ACTIVE LOW
		BUSRQ		: IN STD_LOGIC; 	-- ACTIVE LOW
		RESET		: IN STD_LOGIC; 	-- ACTIVE LOW
		MI			: BUFFER STD_LOGIC; 	-- ACTIVE LOW
		RFSH		: OUT STD_LOGIC 	-- ACTIVE LOW
	 );
end Processor;

architecture Structural of Processor is




//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module TEST(

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================



endmodule
