library IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

entity LCD_TOP is
    Port 
	 ( 
		CLOCK_50		: IN STD_LOGIC;
		CLOCK2_50	: IN STD_LOGIC;
		CLOCK3_50	: IN STD_LOGIC;
		CLOCK4_50	: IN STD_LOGIC;
		SW				: IN STD_LOGIC_VECTOR(9 downto 0);
		KEY			: IN STD_LOGIC_VECTOR(3 downto 0);
		HEX0			: OUT STD_LOGIC_VECTOR(6 downto 0);
		HEX1			: OUT STD_LOGIC_VECTOR(6 downto 0);
		HEX2			: OUT STD_LOGIC_VECTOR(6 downto 0);
		HEX3			: OUT STD_LOGIC_VECTOR(6 downto 0);
		HEX4			: OUT STD_LOGIC_VECTOR(6 downto 0);
		HEX5			: OUT STD_LOGIC_VECTOR(6 downto 0);
		LEDR			: OUT STD_LOGIC_VECTOR(9 downto 0);
		GPIO_0		: INOUT STD_LOGIC_VECTOR(35 downto 0);
		GPIO_1		: INOUT STD_LOGIC_VECTOR(35 downto 0)
	 );
end TOP;

architecture Structural of TOP is

	COMPONENT PROCESSOR IS
		PORT
		(
			ADDRESS	: BUFFER STD_LOGIC_VECTOR(15 downto 0);
			DATA		: INOUT STD_LOGIC_VECTOR(7 downto 0);
			CLOCK		: IN STD_LOGIC;
			INT		: IN STD_LOGIC;
			NMI		: IN STD_LOGIC;
			HALT		: OUT STD_LOGIC;
			MREQ		: OUT STD_LOGIC;
			IORQ		: OUT STD_LOGIC;
			RD			: BUFFER STD_LOGIC;
			WR			: BUFFER STD_LOGIC;
			BUSAK		: OUT STD_LOGIC;
			WAET		: IN STD_LOGIC;
			BUSRQ		: IN STD_LOGIC;
			RESET		: IN STD_LOGIC;
			MI			: BUFFER STD_LOGIC;
			RFSH		: OUT STD_LOGIC
		);
	END COMPONENT PROCESSOR;
	
	COMPONENT RAM IS
		PORT
		(
			address	: IN STD_LOGIC_VECTOR(15 DOWNTO 0);
			clock		: IN STD_LOGIC  := '1';
			data		: IN STD_LOGIC_VECTOR(7 DOWNTO 0);
			wren		: IN STD_LOGIC;
			q			: OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
		);
	END COMPONENT RAM;
	
	COMPONENT IMC IS
		PORT
		(
			WR			: IN STD_LOGIC;
			RD 		: IN STD_LOGIC;
			MREQ 		: IN STD_LOGIC;
			Q			: IN STD_LOGIC_VECTOR(7 downto 0);
			DATA		: OUT STD_LOGIC_VECTOR(7 downto 0);
			IO_8		: INOUT STD_LOGIC_VECTOR(7 downto 0)
	 );
	END COMPONENT IMC;
	
	COMPONENT Interface_Controller is
    Port 
	 ( 
		CLOCK		: IN STD_LOGIC;
		KEY		: IN STD_LOGIC_VECTOR(3 downto 0);
		SW			: IN STD_LOGIC_VECTOR(9 downto 0);
		INT		: BUFFER STD_LOGIC;
		IORQ		: IN STD_LOGIC;
		RD			: IN STD_LOGIC;
		RESET		: IN STD_LOGIC;
		LEDR		: OUT STD_LOGIC_VECTOR(9 downto 0);
		ADDRESS	: IN STD_LOGIC_VECTOR(15 downto 0);
		DATA		: INOUT STD_LOGIC_VECTOR(7 downto 0)
	 );
	END COMPONENT Interface_Controller;
	
	COMPONENT Display_Controller is
    Port 
	 ( 
		RESET		: IN STD_LOGIC;
		IORQ		: IN STD_LOGIC;
		WR			: IN STD_LOGIC;
		ADDRESS	: IN STD_LOGIC_VECTOR(15 downto 0);
		DATA		: IN STD_LOGIC_VECTOR(7 downto 0);
		HEX0		: OUT STD_LOGIC_VECTOR(6 downto 0);
		HEX1		: OUT STD_LOGIC_VECTOR(6 downto 0);
		HEX2		: OUT STD_LOGIC_VECTOR(6 downto 0);
		HEX3		: OUT STD_LOGIC_VECTOR(6 downto 0);
		HEX4		: OUT STD_LOGIC_VECTOR(6 downto 0);
		HEX5		: OUT STD_LOGIC_VECTOR(6 downto 0)
	 );
	END COMPONENT Display_Controller;
	
	SIGNAL WIRE_ADDRESS	: STD_LOGIC_VECTOR(15 DOWNTO 0);
	SIGNAL WIRE_Q		 	: STD_LOGIC_VECTOR(7 DOWNTO 0);
	SIGNAL WIRE_DATA		: STD_LOGIC_VECTOR(7 downto 0);
	SIGNAL WIRE_IO			: STD_LOGIC_VECTOR(7 downto 0);	
	SIGNAL WIRE_MI		 	: STD_LOGIC;
	SIGNAL WIRE_WR		 	: STD_LOGIC;
	SIGNAL WIRE_RD		 	: STD_LOGIC;
	SIGNAL WIRE_WREN		: STD_LOGIC;
	SIGNAL WIRE_NMI		: STD_LOGIC;
	SIGNAL WIRE_IORQ		: STD_LOGIC;
	SIGNAL WIRE_MREQ		: STD_LOGIC;
	SIGNAL WIRE_BUSAK		: STD_LOGIC;
	
begin
	
	IC_0: PROCESSOR
	PORT MAP
	(
		ADDRESS	=> WIRE_ADDRESS,
		DATA		=> WIRE_IO,
		CLOCK		=> CLOCK_50,
		INT		=> '1',
		NMI		=> WIRE_NMI, -- connected to keyboard controller
		HALT		=> GPIO_0(10),
		MREQ		=> WIRE_MREQ,
		IORQ		=> WIRE_IORQ,
		RD			=> WIRE_RD,
		WR			=> WIRE_WR,
		BUSAK		=> WIRE_BUSAK,
		WAET		=> GPIO_0(16),
		BUSRQ		=> GPIO_0(17),
		RESET		=> SW(9),
		MI			=> WIRE_MI,
		RFSH		=> GPIO_1(19)
	);
		
	IC_1: RAM
	PORT MAP
	(
		address	=> WIRE_ADDRESS,
		clock		=> WIRE_MI,
		data		=> WIRE_DATA,
		wren		=> WIRE_WR,
		q			=> WIRE_Q
	);
		
	IC_2: IMC
	PORT MAP
	(
		WR			=> WIRE_WR,
		RD 		=> WIRE_RD,
		MREQ		=> WIRE_MREQ,
		Q			=> WIRE_Q,
		DATA		=> WIRE_DATA,
		IO_8		=> WIRE_IO
	);
		
	IC_3: Interface_Controller
	PORT MAP
	(
		CLOCK		=> CLOCK_50,
		KEY		=> KEY,
		SW			=> SW,
		INT		=> WIRE_NMI,
		IORQ		=> WIRE_IORQ,
		RD			=> WIRE_BUSAK,
		LEDR		=> LEDR,
		RESET		=> SW(9),
		ADDRESS  => WIRE_ADDRESS,
		DATA		=> WIRE_IO
	);
	
	IC_4: Display_Controller
	PORT MAP
	(
		RESET		=> SW(9),
		IORQ		=> WIRE_IORQ,
		WR			=> WIRE_WR,
		ADDRESS	=> WIRE_ADDRESS,
		DATA		=> WIRE_DATA,
		HEX0		=> HEX0,
		HEX1		=> HEX1,
		HEX2		=> HEX2,
		HEX3		=> HEX3,
		HEX4		=> HEX4,
		HEX5		=> HEX5
	);
		
END Structural; 
