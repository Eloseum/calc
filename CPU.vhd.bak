library IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;
USE work.GaimBoiLibrary.ALL;



entity CPU is
    Port 
	 ( 
		------------ Audio ------------
		AUD_ADCDAT	: in STD_LOGIC;
		AUD_ADCLRCK	: in STD_LOGIC;
		AUD_BCLK	: in STD_LOGIC;
		AUD_DACDAT	: in STD_LOGIC;
		AUD_DACLRCK	: in STD_LOGIC;
		AUD_XCK	: in STD_LOGIC;
		------------ Clock ------------
		CLOCK_50 : in STD_LOGIC;
		CLOCK2_50 : in STD_LOGIC;
		CLOCK3_50 : in STD_LOGIC;
		CLOCK4_50 : in STD_LOGIC;
		------------ SDRAM ------------
		DRAM_ADDR	: out STD_LOGIC_VECTOR(12 downto 0);
		DRAM_BA		: out STD_LOGIC_VECTOR(1 downto 0);
		DRAM_CAS_N	: out STD_LOGIC;
		DRAM_CKE		: out STD_LOGIC;
		DRAM_CLK		: out STD_LOGIC;
		DRAM_CS_N	: out STD_LOGIC;
		DRAM_DQ		: inout STD_LOGIC_VECTOR(15 downto 0);
		DRAM_LDQM	: out STD_LOGIC;
		DRAM_RAS_N	: out STD_LOGIC;
		DRAM_UDQM	: out STD_LOGIC;
		DRAM_WE_N	: out STD_LOGIC;
		------------ I2C for Audio and Video-In ------------
		FPGA_I2C_SCLK	: out STD_LOGIC;
		FPGA_I2C_SDAT	: in STD_LOGIC;
		------------ SEG7 ------------
		HEX0	: out STD_LOGIC_VECTOR(6 downto 0);
		HEX1	: out STD_LOGIC_VECTOR(6 downto 0);
		HEX2	: out STD_LOGIC_VECTOR(6 downto 0);
		HEX3	: out STD_LOGIC_VECTOR(6 downto 0);
		HEX4	: out STD_LOGIC_VECTOR(6 downto 0);
		HEX5	: out STD_LOGIC_VECTOR(6 downto 0);
		------------ KEY ------------
		KEY	: in STD_LOGIC(3 downto 0);
		------------ LED ------------
		LEDR	: out STD_LOGIC(9 downto 0);
		------------ SW ------------
		SW		: in STD_LOGIC_VECTOR(9 downto 0);
		------------ VGA ------------
		VGA_BLANK_N	: out STD_LOGIC;
		VGA_B			: out STD_LOGIC_VECTOR(7 downto 0);
		VGA_CLK		: out STD_LOGIC;
		VGA_G			: out STD_LOGIC_VECTOR(7 downto 0);
		VGA_HS		: out STD_LOGIC;
		VGA_R			: out STD_LOGIC_VECTOR(7 downto 0);
		VGA_SYNC_N	: out STD_LOGIC;
		VGA_VS		: out STD_LOGIC;
	 );

end CPU;

architecture Behavioral of CPU is 

COMPONENT CLOCK is
	port 
	(
		refclk   : in  std_logic := '0'; --  refclk.clk
		rst      : in  std_logic := '0'; --   reset.reset
		outclk_0 : out std_logic;        -- outclk0.clk
		locked   : out std_logic         --  locked.export
	);
END COMPONENT;

COMPONENT RAM is
	port 

	(
		address		: IN STD_LOGIC_VECTOR (14 DOWNTO 0);
		clock		: IN STD_LOGIC  := '1';
		data		: IN STD_LOGIC_VECTOR (7 DOWNTO 0);
		wren		: IN STD_LOGIC;
		q		: OUT STD_LOGIC_VECTOR (7 DOWNTO 0)
	);
END COMPONENT;

------------ Signal Declarations ------------
--
	signal clock_in : STD_LOGIC;
	signal nothing : STD_LOGIC;
	signal output : STD_LOGIC;
--
begin

	SYSTEM_CLOCK : CLOCK
	PORT MAP
	(
		refclk   => CLOCK_50,
		rst      => '0',
		outclk_0 => clock_in, -- 8.4Mhz
		locked 	=> nothing;
	);
	
	test: process(clock_in)
	variable counter : integer := 0;
	begin
		if rising_edge(clock_in) then
			counter := (counter+1);
			if (counter = 1000) then
				output <= not(output);
				counter := 0;
			end if;
		end if;
	end process;
	
	GPIO
	 

end behavioral;